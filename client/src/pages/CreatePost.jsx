import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

import { preview } from "../assets";
import { getRandomPrompt } from "../utils";
import { FormField, Loader } from "../components";


const createPost = () => {
  const navigate = useNavigate(); {/* navigate hook: later can be used to come back to Home page after create a post */}
  const [form, setForm] = useState({
    name: "",
    prompt: "",
    photo: "",
  });
  const [generatingImg, setGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);


  {/* generateImage function */}
  const generateImage = async () => {
    if (form.prompt) {
      try {

        setGeneratingImg(true);
        const response = await fetch("https://openai-image-generation-app.onrender.com/api/v1/dalle", {
          method: "POST",
          headers: {"Content-Type": "application/json",},
          body: JSON.stringify({prompt: form.prompt,}),
          
        });

        // get and pass in the generated photo
        const data = await response.json();
        setForm({ ...form, photo: `data:image/jpeg;base64,${data.photo}` });

      } catch (err) {
        alert(err);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert("Please provide proper prompt");
    }
  };


  {/* handleSubmit function */}
  const handleSubmit = async (e) => {
    e.preventDefault(); // to prevent browser automatically reload the app

    if (form.prompt && form.photo) {
      setLoading(true);

      try {
        // fecth the response data for posting form and image data to postRoutes.js
        const response = await fetch("https://openai-image-generation-app.onrender.com/api/v1/post", {
          method: "POST",
          headers: {"Content-Type": "application/json",},
          body: JSON.stringify(form),
        });

        await response.json();
        navigate("/"); // return to homepage
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    } else {
      alert('Please enter a prompt and generate an image');
    }
  };


  {/* handleChange function */}
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };


  {/* handleSurpriseMe function */}
  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPrompt });
  };


  return (
    <section className="max-w-7xl mx-auto">

      {/* Title section */}
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Create</h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">
          Create imaginative and visually stunning images generated by DALL-E AI
          and share them with the community
        </p>
      </div>

      {/* Form section */}
      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}> {/* submit the form when click on the button handleSubmit */}
        <div className="flex flex-col gap-5">
          <FormField
            labelName="Your name" 
            type="text"
            name="name"
            placeholder="Rachel Tan"
            value={form.name}
            handleChange={handleChange}
          />
          <FormField
            labelName="Prompt"
            type="text"
            name="prompt"
            placeholder="Chinggis Khan riding on a huge falcon flying across the sea"
            value={form.prompt}
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSurpriseMe}
          />
          
          {/* Container for AI-generated image */}
          <div className={`relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-3 flex justify-center items-center 
          ${form.photo ? 'w-128 h-128' : 'w-64 h-64'}`}>

            {form.photo ? (
              <img src={form.photo} alt={form.prompt} className="w-full h-full object-contain"/>
            ) : (
              // If the actual image has not been loaded, use a temporary image
              <img src={preview} alt="preview" className="w-8/12 h-9/12 object-contain opacity-40"/>
            )}
            {/* If the image is during generating, use Loader component */}
            {generatingImg && (
              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                <Loader />
              </div>
            )}
          </div>
        </div>

        {/* Generate image button section */}
        <div className="mt-5 flex gap-5">
          <button type="button" onClick={generateImage} className="text-white bg-green-700 font-medium ronded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"> 
            {/* Check if it is generating an image right now: if so, display 'Generating' as Button text, otherwise display 'Generate' */}
            {generatingImg ? 'Generating...' : 'Generate'}
          </button>
        </div>

        {/* Share button section */}
        <div className="mt-10">
          <p className="mt-2 text-[#666e75] text-[14px]">
            Once you have created the image you want, you can share it with others in the community~
          </p>
          <button type="submit" className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center">
            {loading ? "Loading..." : "Share with the community"}
          </button>
        </div>

      </form>
    </section>
  );
};

export default createPost;