import React, { useState, useEffect } from "react";
import { Loader, Card, FormField } from "../components";

{/* Create this function for reusability*/}
const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((post) => <Card key={post._id} {...post} />);
    } return (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    );
};

const Home = () => {
    {/* two basic states of the Home page*/}
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);

    const [searchText, setSearchText] = useState('');
    const [searchTimeout, setSearchTimeout] = useState(null);
    const [searchedResults, setSearchedResults] = useState(null);


    useEffect(() => {
      const fetchPosts = async () => {
        setLoading(true);
        try {
          const response = await fetch("http://localhost:8080/api/v1/post", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {

            const result = await response.json();
            setAllPosts(result.data.reverse());

          }
        } catch (error) {
          alert(error);
        } finally {
          setLoading(false);
        }
      };

    fetchPosts();
  }, []);

  
  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };



  {/* What's returned to the Home page */}
  return (

    <section className="max-w-7xl mx-auto">

        {/* Title Section */}
        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
                Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
            </p>
        </div>


        {/* Search Box */}
        <div className="mt-16">
            <FormField
                labelName="Search posts"
                type="text"
                name="text"
                placeholder="Search posts"
                value={searchText}
                handleChange={handleSearchChange}
            />
        </div>

        <div className="mt-10">

        {loading ? ( // Check if we are loading
        
            // if loading, use Loader component
            <div className="flex justify-center items-center"><Loader /></div>

        ) : ( // if not loading, show images (if available)
            <>

            {searchText && ( // check state: if we have search text, display it
                <h2 className="font-medium text-[#666e75] text-xl mb-3">
                    Showing results for <span className="text-[#222328]">{searchText}</span>
                </h2>
            )} 

            {/* use grid for layout images */}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
            {searchText ? (
                // if we have search text, but no searchedResults, it should pass in the below title
                <RenderCards data={searchedResults} title="No search results found"/>
            ) : (
                // if we do not have a search text, pass in all posts, and a title says 'no posts found'
                <RenderCards data={allPosts} title="No posts found" />
            )}
            </div>

            </>
        )}
      </div>
    </section>
  );
};

export default Home;